package View;

import Controller.OrderManager;
import Controller.TransactionManager;
import Model.Order;
import Model.User;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

public class Orders extends javax.swing.JPanel {

    private static Orders orders = new Orders();
    private static User user;
    private static DefaultListModel<String> model;

    /**
     * Creates new form Orders
     */
    public Orders() {
        initComponents();
    }

    public static Orders getPane() {
        return orders;
    }

    public static void init() {
        // Inicializa el ResultSet de Ordermanager
        user = MainFrame.getUser();
        OrderManager.start(user != null ? user.getUsrName() : "admin");
        orders.toggleBackward(false);
        orders.toggleForward(true);
        orders.showOrder(OrderManager.next());
    }

    private void showOrder(Order o) {
        // Muestra los datos del pedido indicado
        this.clientNif.setText(user != null ? user.getUsrName() : "Administrator");
        this.orderloc.setText(String.valueOf(o.getLoc()));
        this.price.setText(String.valueOf(o.getPrice()));

        // Actualizamos el JList
        updateList(o);
    }

    private void updateList(Order o) {
        // Actualiza los datos del JList con transacciones referentes al pedido
        // actual.
        model = new DefaultListModel<>();

        // Obtener el precio total del pedido
        ArrayList<Float> fullPriceL = new ArrayList<>();
        TransactionManager.select("where loc = " + o.getLoc()).forEach(t -> {
            fullPriceL.add(t.getDel_costs());
        });
        float fullPrice = o.getPrice();
        for (float f : fullPriceL) {
            fullPrice += f;
        }

        // Obtener las transacciones para la lista
        TransactionManager.select("where loc = " + o.getLoc()).forEach(t -> {
            model.addElement(t.toString());
        });

        this.priceCosts.setText(String.format("%.2f", fullPrice));

        transactionList.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ordersTitle = new javax.swing.JLabel();
        orderLocLabel = new javax.swing.JLabel();
        orderloc = new javax.swing.JLabel();
        clientLabel = new javax.swing.JLabel();
        clientNif = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        price = new javax.swing.JLabel();
        firstButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        lastButton = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        transactionList = new javax.swing.JList<>();
        transactionsTitle = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        priceCostsLabel = new javax.swing.JLabel();
        priceCosts = new javax.swing.JLabel();

        ordersTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        ordersTitle.setText("Orders");

        orderLocLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        orderLocLabel.setText("Order No. ");

        orderloc.setText("orderloc");

        clientLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        clientLabel.setText("Client");

        clientNif.setText("clientNif");

        priceLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        priceLabel.setText("Price");

        price.setText("price");

        firstButton.setText("First");
        firstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstButtonActionPerformed(evt);
            }
        });

        prevButton.setText("Previous");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        lastButton.setText("Last");
        lastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastButtonActionPerformed(evt);
            }
        });

        transactionList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        transactionList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        transactionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane.setViewportView(transactionList);

        transactionsTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        transactionsTitle.setText("Transactions");

        priceCostsLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        priceCostsLabel.setText("Price + Delivery Costs");

        priceCosts.setText("pricePlusDelCosts");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstButton)
                                    .addComponent(prevButton))
                                .addGap(162, 162, 162)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nextButton)
                                    .addComponent(lastButton)))
                            .addComponent(ordersTitle)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderLocLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderloc, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clientLabel)
                            .addComponent(clientNif, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceLabel)
                            .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceCostsLabel)
                            .addComponent(priceCosts, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(transactionsTitle)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordersTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transactionsTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(orderLocLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderloc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientNif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(priceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(price)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceCostsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceCosts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prevButton)
                            .addComponent(nextButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstButton)
                            .addComponent(lastButton))
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(12, Short.MAX_VALUE))))
            .addComponent(separator, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Event Listeners y recorrido de pedidos">
    private void firstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstButtonActionPerformed
        // Muestra el primer pedido
        showOrder(OrderManager.first());

        // Estamos en el primero > No podemos retroceder
        toggleBackward(false);

        // Ya se puede avanzar si antes no se podía
        if (!nextButton.isEnabled())
            toggleForward(true);
    }//GEN-LAST:event_firstButtonActionPerformed

    private void lastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastButtonActionPerformed
        // Muestra el último pedido
        showOrder(OrderManager.last());

        // Estamos en el último > No podemos avanzar
        toggleForward(false);

        // Ya se puede retroceder si antes no se podía
        if (!prevButton.isEnabled())
            toggleBackward(true);
    }//GEN-LAST:event_lastButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        // Muestra el pedido anterior
        showOrder(OrderManager.prev());

        // Si hemos llegado al principio > No podemos retroceder
        if (OrderManager.isFirst()) {
            toggleBackward(false);
        }

        // Si antes no podíamos avanzar, ahora ya sí
        if (!nextButton.isEnabled())
            toggleForward(true);
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // Muestra el pedido siguiente
        showOrder(OrderManager.next());

        // Si hemos llegado al final, no podemos avanzar
        if (OrderManager.isLast()) {
            toggleForward(false);
        }

        // Si antes no podíamos retroceder, ahora ya sí
        if (!prevButton.isEnabled())
            toggleBackward(true);
    }//GEN-LAST:event_nextButtonActionPerformed

    private void toggleForward(boolean b) {
        // Método interruptor para activar y desactivar los botones para avanzar
        lastButton.setEnabled(b);
        nextButton.setEnabled(b);
    }

    private void toggleBackward(boolean b) {
        // Método interruptor para activar y desactivar los botones para retroceder
        firstButton.setEnabled(b);
        prevButton.setEnabled(b);
    }
    // </editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clientLabel;
    private javax.swing.JLabel clientNif;
    private javax.swing.JButton firstButton;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton lastButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel orderLocLabel;
    private javax.swing.JLabel orderloc;
    private javax.swing.JLabel ordersTitle;
    private javax.swing.JButton prevButton;
    private javax.swing.JLabel price;
    private javax.swing.JLabel priceCosts;
    private javax.swing.JLabel priceCostsLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JSeparator separator;
    private javax.swing.JList<String> transactionList;
    private javax.swing.JLabel transactionsTitle;
    // End of variables declaration//GEN-END:variables
}
